# üõ†Ô∏è Laboratorio Completo: Monitoreo Cloud-Native con Prometheus & Grafana en Azure

---

## üìã Objetivo General

Desplegar, configurar y practicar el monitoreo avanzado de recursos en Azure usando Prometheus y Grafana:

* Instalaci√≥n en VM Linux, AKS, integraci√≥n con Windows Server, uso de exporters, consultas avanzadas, dashboards, alertas, y extracci√≥n de logs/metrics desde distintas fuentes.

---

## üìù Prerrequisitos

* 1 VM Ubuntu Linux (Azure)
* 1 cl√∫ster AKS por alumno (con `kubectl` y permisos admin)
* 1 VM Windows Server 2025 (acceso RDP/admin)
* Helm instalado en tu m√°quina o Cloud Shell
* Azure CLI disponible
* Acceso de admin a Dynatrace y/o ELK (si lo usas para comparar)
* (Opcional) Docker

---

## ‚öôÔ∏è **Secci√≥n 1: Instalaci√≥n Standalone de Prometheus en VM Ubuntu**

### 1.1. Preparar la VM Linux

```bash
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install wget tar curl ufw -y
sudo useradd --no-create-home --shell /bin/false prometheus
sudo mkdir /etc/prometheus /var/lib/prometheus
sudo chown prometheus:prometheus /var/lib/prometheus
```

### 1.2. Descargar e instalar Prometheus

```bash
cd /tmp
wget https://github.com/prometheus/prometheus/releases/download/v2.52.0/prometheus-2.52.0.linux-amd64.tar.gz
tar xvf prometheus-2.52.0.linux-amd64.tar.gz
sudo cp prometheus-2.52.0.linux-amd64/prometheus /usr/local/bin/
sudo cp prometheus-2.52.0.linux-amd64/promtool /usr/local/bin/
sudo cp -r prometheus-2.52.0.linux-amd64/consoles /etc/prometheus
sudo cp -r prometheus-2.52.0.linux-amd64/console_libraries /etc/prometheus
sudo cp prometheus-2.52.0.linux-amd64/prometheus.yml /etc/prometheus/
sudo chown -R prometheus:prometheus /etc/prometheus
```

### 1.3. Configuraci√≥n b√°sica

Edita `/etc/prometheus/prometheus.yml` para agregar tus propios targets, por ejemplo:

```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
```

### 1.4. Crear y activar servicio systemd

```bash
sudo nano /etc/systemd/system/prometheus.service
```

Contenido:

```
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/var/lib/prometheus/

[Install]
WantedBy=multi-user.target
```

```bash
sudo systemctl daemon-reload
sudo systemctl start prometheus
sudo systemctl enable prometheus
sudo systemctl status prometheus
```

Accede en tu navegador: `http://<ip-de-tu-vm>:9090`

---

## ‚öôÔ∏è **Secci√≥n 2: Instalaci√≥n de Node Exporter en VM Ubuntu y Windows**

### 2.1. Node Exporter (Linux)

```bash
cd /tmp
wget https://github.com/prometheus/node_exporter/releases/download/v1.8.1/node_exporter-1.8.1.linux-amd64.tar.gz
tar xvf node_exporter-1.8.1.linux-amd64.tar.gz
sudo cp node_exporter-1.8.1.linux-amd64/node_exporter /usr/local/bin/
sudo useradd -rs /bin/false node_exporter
sudo nano /etc/systemd/system/node_exporter.service
```

Contenido:

```
[Unit]
Description=Node Exporter
After=network.target

[Service]
User=node_exporter
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=default.target
```

```bash
sudo systemctl daemon-reload
sudo systemctl start node_exporter
sudo systemctl enable node_exporter
sudo systemctl status node_exporter
```

Prueba:
`curl http://localhost:9100/metrics`
Agrega el target en `prometheus.yml`: sudo vi /etc/prometheus/prometheus.yml

```yaml
  - job_name: 'linux-vms'
    static_configs:
      - targets: ['localhost:9100', '<IP-OTRA-VM>:9100']
```

### 2.2. Node Exporter en **Windows Server** (opcional, avanzado)

* Descarga [wmi\_exporter](https://github.com/prometheus-community/windows_exporter/releases) (ahora `windows_exporter`).
* Instala como servicio con privilegios de admin.
* Expondr√° las m√©tricas en `http://localhost:9182/metrics`
* Agrega target en tu `prometheus.yml`:

```yaml
  - job_name: 'windows-vms'
    static_configs:
      - targets: ['<IP-WINDOWS>:9182']
```

---

## ‚öôÔ∏è **Secci√≥n 3: Instalaci√≥n de Prometheus + Grafana en Kubernetes (AKS)**

### 3.1. Namespace y Helm Repo

```bash
kubectl create namespace monitoring
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
```

### 3.2. Instalar Prometheus (Helm)

```bash
helm install prometheus prometheus-community/prometheus --namespace monitoring --set server.persistentVolume.enabled=false
kubectl get pods -n monitoring
kubectl port-forward -n monitoring svc/prometheus-server 9090:80
curl http://localhost:9090 (abrir en otra pesta√±a)
```

### 3.3. Instalar Grafana (Helm)

```bash
helm install grafana grafana/grafana --namespace monitoring --set adminPassword='GrafanaLab123!' --set persistence.enabled=false
kubectl get pods -n monitoring
kubectl port-forward -n monitoring svc/grafana 3000:80
# http://localhost:3000  (admin/GrafanaLab123!)
```

### 3.4. Validar Exporters y Metrics

* Aseg√∫rate que **node-exporter** y **kube-state-metrics** est√©n corriendo (ya vienen con el chart).
* Para extra: instala exporters adicionales seg√∫n tu inter√©s (MySQL, Redis, NGINX, etc.).

---

## ‚öôÔ∏è **Secci√≥n 4: Pruebas de Consultas PromQL y Dashboards Avanzados**

### 4.1. Consultas b√°sicas en Prometheus

* Accede a [http://localhost:9090](http://localhost:9090)
* Prueba:

  * `up`
  * `node_cpu_seconds_total`
  * `wmi_cpu_time_total` (para Windows)
  * `kube_pod_info`

### 4.2. Consultas PromQL para Grafana

**CPU:**

```promql
sum(rate(node_cpu_seconds_total{mode!="idle"}[5m])) by (instance)
```

**Memoria:**

```promql
sum(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) by (instance)
```

**Pods activos:**

```promql
count(kube_pod_status_phase{phase="Running"}) by (namespace)
```

**Discos llenos en VM Linux:**

```promql
(node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"}) * 100
```

### 4.3. Dashboards de Grafana

* Accede a Grafana [http://localhost:3000](http://localhost:3000)
* Agrega data source Prometheus: `http://prometheus-server.monitoring.svc.cluster.local`
* Importa dashboards oficiales:

  * Node Exporter Full: [ID 1860](https://grafana.com/grafana/dashboards/1860)
  * Kubernetes: [ID 315](https://grafana.com/grafana/dashboards/315)
* Crea paneles personalizados para visualizar tus VM, nodos de AKS, servicios, etc.

---

## ‚öôÔ∏è **Secci√≥n 5: Integraci√≥n de Logs (Opcional, Avanzado)**

### 5.1. Exportar logs desde VM o AKS a Prometheus (con exporters como [Promtail](https://grafana.com/docs/loki/latest/clients/promtail/) o pushgateway)

* Instala **Promtail** en la VM para enviar logs a Loki (lo puedes visualizar en Grafana, aunque Prometheus es solo para m√©tricas, no logs nativos).
* Alternativamente, usa el **ELK stack** para logs y combina paneles en Grafana.

---

## ‚öôÔ∏è **Secci√≥n 6: Pruebas de Alertas y Simulaci√≥n de Incidentes**

### 6.1. Prueba de stress en Linux VM

```bash
sudo apt install stress -y
stress --cpu 2 --timeout 180
```

Verifica en Prometheus/Grafana el aumento de CPU.

### 6.2. Prueba de stress en AKS (pod nginx)

```bash
kubectl run stress --image=alpine --restart=Never -it -- sh
# Dentro del pod:
apk add --no-cache stress-ng
stress-ng --cpu 2 --timeout 120s
```

Monitorea el pod/namespace desde Grafana.

---

## ‚öôÔ∏è **Secci√≥n 7: Exporters Personalizados y Targets Externos**

* **MySQL/MSSQL/Redis Exporter:**
  Instala los exporters correspondientes y agr√©gales a tu prometheus.yml
* **Blackbox Exporter:**
  Monitorea endpoints HTTP/ICMP externos.

---

## ‚öôÔ∏è **Secci√≥n 8: Troubleshooting, Limpieza y Recomendaciones**

### 8.1. Troubleshooting

* Grafana sin datos ‚Üí Verifica data source, puertos, logs del pod
* Prometheus no scrapea targets ‚Üí Revisa configuraciones y puertos/firewall
* Exporters ca√≠dos ‚Üí Reinicia pods, verifica logs

### 8.2. Limpieza

```bash
# Para liberar recursos:
kubectl delete namespace monitoring
sudo systemctl stop prometheus
sudo systemctl stop node_exporter
```

---

## üí° **Consejos y mejores pr√°cticas**

* Usa storage persistente en entornos productivos.
* A√≠sla dashboards, accesos y exporters por equipos/proyectos.
* Documenta queries, paneles y alertas.
* Considera federaci√≥n Prometheus para escenarios multinube.

---

## üìö Recursos Extra

* [Prometheus Docs](https://prometheus.io/docs/)
* [Grafana Labs Docs](https://grafana.com/docs/)
* [Prometheus Exporters List](https://prometheus.io/docs/instrumenting/exporters/)
* [Grafana Dashboards](https://grafana.com/grafana/dashboards/)

---



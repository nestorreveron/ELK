# üèÜ **Lab06: Marat√≥n de Observabilidad, AI Ops y Troubleshooting avanzado con Davis AI y Dynatrace (8 bloques intensivos)**

---

## **Objetivo general**

Dominar el uso de Dynatrace y Davis AI para detectar, analizar, correlacionar y remediar incidentes complejos 
en entornos Azure (VM, redes, AKS, App Services, SQL, Storage, etc.), aplicando pr√°cticas de AI Ops, root cause analysis, 
generaci√≥n y consumo de logs, m√©tricas custom y automatizaci√≥n avanzada.

---

## **Estructura sugerida (6+ horas, bloques de \~45 minutos cada uno)**

| Bloque | Enfoque                                                     |
| ------ | ----------------------------------------------------------- |
| 1      | Verificaci√≥n, setup y observabilidad end-to-end             |
| 2      | Simulaci√≥n de fallos complejos en infraestructura Azure     |
| 3      | Fallos en aplicaciones distribuidas (AKS/App Services)      |
| 4      | Logs avanzados, ingesti√≥n, parsing y correlaci√≥n            |
| 5      | M√©tricas custom, Prometheus y auto-alerting                 |
| 6      | Deep-Dive AI Davis: RCA, topolog√≠a, anomal√≠as encadenadas   |
| 7      | Synthetic Monitoring, alertas inteligentes y automatizaci√≥n |
| 8      | AppSec (si tienes acceso), dashboards y retrospectiva       |

---

## **Paso a paso y retos detallados**

---

### **Bloque 1: Observabilidad y Setup avanzado**

1. **Verifica que Dynatrace OneAgent est√© funcionando** en:

   * Todas tus VMs (Linux/Windows)
   * Todos los nodos AKS
   * Azure App Services, SQL, Storage
2. **Confirma integraciones**:

   * Azure Monitor/Log Analytics
   * Prometheus (AKS/VMs)
   * Logs custom y rutas de logs extendidas
3. **Revisa el mapa Smartscape**:

   * Identifica todas las dependencias entre hosts, servicios, procesos, pods y endpoints.
   * Toma screenshots antes de iniciar los incidentes.
4. **Revisa el historial de problemas detectados por Davis AI** en Problems > Closed.

---

### **Bloque 2: Simulaci√≥n de fallos de infraestructura y correlaci√≥n Davis AI**

#### **Reto 2.1 ‚Äì Ataques de recursos y red**

* **Genera**: Carga intensiva de CPU, memoria y disco en varias VMs a la vez.

  ```bash
  sudo apt install stress -y
  stress --cpu 2 --vm 2 --hdd 1 --timeout 180
  ```
* **Simula**: Un corte de red (desconecta NIC, bloquea puertos, o inyecta latencia con tc/iptables).
* **En AKS**: Simula un nodo no disponible (drain node, apaga una VM de worker).

#### **Qu√© debe pasar**

* Dynatrace debe levantar m√∫ltiples problemas correlacionados.
* **Davis AI debe identificar la ra√≠z (root cause)**, por ejemplo: "Host unavailable", "Service degradation due to upstream dependency", "Disk IO saturation".
* **Analiza el "Problem card"**: ¬øQu√© entidades y relaciones detect√≥ Davis? ¬øQu√© timeline reconstruy√≥?
* **Experimenta**: Haz que dos fallos coincidan en tiempo y revisa si Davis AI los agrupa en un solo incidente.

---

### **Bloque 3: Fallos en aplicaciones distribuidas, microservicios y App Services**

#### **Reto 3.1 ‚Äì Ca√≠da o degradaci√≥n de microservicios en AKS**

* Escala deployment cr√≠tico a 0:

  ```bash
  kubectl scale deployment <nombre> --replicas=0
  ```
* O genera un **CrashLoopBackOff** (cambia la imagen del container, introduce error de config/env).
* **En AKS**: Crea una NetworkPolicy que bloquee tr√°fico entre servicios principales.
* **En App Services**: Aplica throttling o limita el autoscale.

#### **Observa y analiza**

* ¬øQu√© servicios y endpoints detecta Davis como afectados?
* ¬øSe correlacionan fallos entre pods, servicios, procesos?
* ¬øC√≥mo reconstruye Davis el timeline? ¬øSugiere root cause en infraestructura, red, o c√≥digo?
* Toma screenshots de la "causa ra√≠z", las dependencias y la l√≠nea de tiempo.

---

### **Bloque 4: Logs avanzados, ingesti√≥n y correlaci√≥n AI**

#### **Reto 4.1 ‚Äì Ingesta y parsing de logs cr√≠ticos**

* Crea un **log custom** con errores en una VM:

  ```bash
  for i in {1..100}; do echo "ERROR: Simulated app failure at $(date)" >> /var/log/myapplog.log; sleep 3; done
  ```
* Aseg√∫rate que Dynatrace recoja y parsee estos logs (verifica configuraci√≥n en Log Ingestion).
* **Provoca errores reales** (apaga procesos, simula 502 en nginx).
* **Revisa en Dynatrace**:

  * ¬øC√≥mo asocia Davis AI los logs a problemas abiertos?
  * ¬øCorrelaciona log spikes con incidentes de CPU, memoria o network?
  * Filtra logs por entidad problem√°tica y muestra evidencia de la correlaci√≥n AI.
  * A√±ade una regla de parsing para un nuevo formato de log.

---

### **Bloque 5: M√©tricas custom, Prometheus y auto-alerting avanzado**

#### **Reto 5.1 ‚Äì Ingesta de m√©tricas y auto-alertas Davis AI**

* Exp√≥n un endpoint Prometheus en AKS o VM (`node_exporter`, app custom).
* En Dynatrace: **Agrega endpoint Prometheus** y confirma ingesti√≥n de m√©tricas custom.
* Crea una m√©trica artificial (ejemplo: errores por minuto, latencia custom, temperatura, etc.)
* **Induce un spike o degradaci√≥n** en esa m√©trica (simula altos errores HTTP o baja tasa de √©xito).
* **Configura auto-alerting Davis AI** sobre la m√©trica y valida la reacci√≥n autom√°tica.
* **¬øDavis AI asocia este problema a otros incidentes abiertos?**

---

### **Bloque 6: Deep Dive con Davis AI ‚Äì Correlaci√≥n y anomal√≠as encadenadas**

#### **Reto 6.1 ‚Äì Incidentes encadenados y an√°lisis transversal**

* **Simula** una cadena de fallos:

  * Un pod AKS cae ‚Üí servicio dependiente falla ‚Üí API deja de responder ‚Üí app frontend marca error.
* **Observa c√≥mo Davis AI correlaciona todo el flujo** (pod, node, service, process, endpoint, app).
* Abre la "Causa ra√≠z" y lee la explicaci√≥n AI (puedes usar la opci√≥n "Explain with Davis AI").
* **Genera preguntas a Davis AI** usando la funcionalidad de *Ask Davis* (si tu tenant lo tiene):

  * ¬øCu√°l fue la causa ra√≠z del spike de errores a las 11:25am?
  * ¬øQu√© entidades est√°n correlacionadas con el host xyz?
  * ¬øC√≥mo afecta este incidente al cumplimiento del SLO X?
* **Prueba la integraci√≥n con GPT o LLM si est√° habilitada**.

---

### **Bloque 7: Synthetic Monitoring, automatizaci√≥n, alertas inteligentes y workflows**

#### **Reto 7.1 ‚Äì Synthetic, AI y respuesta autom√°tica**

* Crea un test Synthetic (single click, browser, o script) sobre endpoint cr√≠tico.
* Induce una ca√≠da/interrupci√≥n (apaga VM o endpoint).
* Observa generaci√≥n de problemas por Synthetic + infraestructura y correlaci√≥n Davis AI.
* Configura una alerta avanzada que env√≠e un webhook a un servicio externo (Teams, Slack, etc).
* **Automatiza una respuesta**:

  * Crea un Azure Logic App, Runbook o Azure Function que, ante la alerta de Dynatrace, reinicie el recurso fallido (opcional para alumnos avanzados).
* Revisa qu√© tan r√°pido y preciso es el ciclo *Detecta (Davis) ‚Üí Notifica ‚Üí Responde ‚Üí Cierra incidente*.

---

### **Bloque 8: AppSec (opcional), dashboards ejecutivos y retro**

#### **Reto 8.1 ‚Äì AppSec y seguridad AI-driven (si aplica)**

* Activa Dynatrace Application Security.
* Simula un problema: exp√≥n app vulnerable, ejecuta test de fuzzing o ataque b√°sico (XSS, SQLi).
* Observa si Davis AI detecta y asocia findings a entidades afectadas.
* Integra findings en dashboards y SLO de seguridad.

#### **Reto 8.2 ‚Äì Dashboards y retro de incidentes**

* Crea dashboards por equipo (infra, app, DevOps, negocio) con m√©tricas, problemas AI, SLO, Synthetic.
* Haz una retrospectiva: ¬øqu√© escenarios cubri√≥ bien Davis? ¬øD√≥nde falt√≥ visibilidad?
* Presenta las ‚ÄúAI Insights‚Äù de Davis a un p√∫blico no t√©cnico (ejecutivos).

---

## **Entrega**

* Evidencias (capturas, YAML, logs, scripts, dashboards).
* Un ‚Äúinforme AI Davis‚Äù donde cada alumno explique c√≥mo el an√°lisis AI ayud√≥ (o no) en cada caso.
* Un mini post-mortem de un incidente complejo: incluye timeline, correlaciones, causa ra√≠z, remediaci√≥n y mejoras propuestas.

---

## **Ideas extra/avanzadas**

* **Custom queries con DQL/Dynatrace Query Language** para encontrar patrones que Davis AI no detect√≥ autom√°ticamente.
* Simular errores intermitentes y ver si Davis AI los reconoce como *flapping*.
* Probar los *What-if analysis* o predicciones AI sobre tendencias de recursos (si tienes acceso).


